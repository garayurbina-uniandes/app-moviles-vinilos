// Generated by view binder compiler. Do not edit!
package com.vinylsMobile.vinylsApplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.vinylsMobile.vinylsApplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityDetailArtistBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final ConstraintLayout constraintLayout;

  @NonNull
  public final CoordinatorLayout detailAlbum;

  @NonNull
  public final ImageView imageViewArtist;

  @NonNull
  public final TextView listTexAlbums;

  @NonNull
  public final TextView listTexPrizes;

  @NonNull
  public final TextView textContentArtist;

  @NonNull
  public final TextView textContentDate;

  @NonNull
  public final TextView textContentDescription;

  @NonNull
  public final TextView textLabelAlbums;

  @NonNull
  public final TextView textLabelArtist;

  @NonNull
  public final TextView textLabelDate;

  @NonNull
  public final TextView textLabelDescription;

  @NonNull
  public final TextView textLabelPrizes;

  @NonNull
  public final Toolbar toolbar;

  private ActivityDetailArtistBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AppBarLayout appBarLayout, @NonNull ConstraintLayout constraintLayout,
      @NonNull CoordinatorLayout detailAlbum, @NonNull ImageView imageViewArtist,
      @NonNull TextView listTexAlbums, @NonNull TextView listTexPrizes,
      @NonNull TextView textContentArtist, @NonNull TextView textContentDate,
      @NonNull TextView textContentDescription, @NonNull TextView textLabelAlbums,
      @NonNull TextView textLabelArtist, @NonNull TextView textLabelDate,
      @NonNull TextView textLabelDescription, @NonNull TextView textLabelPrizes,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.constraintLayout = constraintLayout;
    this.detailAlbum = detailAlbum;
    this.imageViewArtist = imageViewArtist;
    this.listTexAlbums = listTexAlbums;
    this.listTexPrizes = listTexPrizes;
    this.textContentArtist = textContentArtist;
    this.textContentDate = textContentDate;
    this.textContentDescription = textContentDescription;
    this.textLabelAlbums = textLabelAlbums;
    this.textLabelArtist = textLabelArtist;
    this.textLabelDate = textLabelDate;
    this.textLabelDescription = textLabelDescription;
    this.textLabelPrizes = textLabelPrizes;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDetailArtistBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDetailArtistBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_detail_artist, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDetailArtistBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.constraintLayout;
      ConstraintLayout constraintLayout = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayout == null) {
        break missingId;
      }

      CoordinatorLayout detailAlbum = (CoordinatorLayout) rootView;

      id = R.id.imageViewArtist;
      ImageView imageViewArtist = ViewBindings.findChildViewById(rootView, id);
      if (imageViewArtist == null) {
        break missingId;
      }

      id = R.id.listTexAlbums;
      TextView listTexAlbums = ViewBindings.findChildViewById(rootView, id);
      if (listTexAlbums == null) {
        break missingId;
      }

      id = R.id.listTexPrizes;
      TextView listTexPrizes = ViewBindings.findChildViewById(rootView, id);
      if (listTexPrizes == null) {
        break missingId;
      }

      id = R.id.textContentArtist;
      TextView textContentArtist = ViewBindings.findChildViewById(rootView, id);
      if (textContentArtist == null) {
        break missingId;
      }

      id = R.id.textContentDate;
      TextView textContentDate = ViewBindings.findChildViewById(rootView, id);
      if (textContentDate == null) {
        break missingId;
      }

      id = R.id.textContentDescription;
      TextView textContentDescription = ViewBindings.findChildViewById(rootView, id);
      if (textContentDescription == null) {
        break missingId;
      }

      id = R.id.textLabelAlbums;
      TextView textLabelAlbums = ViewBindings.findChildViewById(rootView, id);
      if (textLabelAlbums == null) {
        break missingId;
      }

      id = R.id.textLabelArtist;
      TextView textLabelArtist = ViewBindings.findChildViewById(rootView, id);
      if (textLabelArtist == null) {
        break missingId;
      }

      id = R.id.textLabelDate;
      TextView textLabelDate = ViewBindings.findChildViewById(rootView, id);
      if (textLabelDate == null) {
        break missingId;
      }

      id = R.id.textLabelDescription;
      TextView textLabelDescription = ViewBindings.findChildViewById(rootView, id);
      if (textLabelDescription == null) {
        break missingId;
      }

      id = R.id.textLabelPrizes;
      TextView textLabelPrizes = ViewBindings.findChildViewById(rootView, id);
      if (textLabelPrizes == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityDetailArtistBinding((CoordinatorLayout) rootView, appBarLayout,
          constraintLayout, detailAlbum, imageViewArtist, listTexAlbums, listTexPrizes,
          textContentArtist, textContentDate, textContentDescription, textLabelAlbums,
          textLabelArtist, textLabelDate, textLabelDescription, textLabelPrizes, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
